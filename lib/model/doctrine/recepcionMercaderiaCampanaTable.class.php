<?php

/**
 * recepcionMercaderiaCampanaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class recepcionMercaderiaCampanaTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object recepcionMercaderiaCampanaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('recepcionMercaderiaCampana');
    }

	/**
	* Retorna el resumen de mercaderia ingresada para una campaña y listado de productoItems
	* 
	* @param $idCampana
	* @param $idsProductoItem
	* 
	* @return array
	*/
    public function getResumen($idCampana, $idsProductoItem)
    {
    	$data = $this->createQuery('rmc')
    				 ->select('rmc.id_producto_item, sum(cantidad) as cantidad, group_concat(rmc.observacion separator \'<br />\') as observaciones')
					 ->addWhere('rmc.id_campana = ?', $idCampana)
					 ->andWhereIn('rmc.id_producto_item', $idsProductoItem)
					 ->groupBy('rmc.id_producto_item')
					 ->fetchArray();

		$results = array();

		foreach ($idsProductoItem as $idProductoItem) {
			$results[ $idProductoItem ] = array('cantidad' => 0, 'observaciones' => '');
		}		

		foreach ($data as $row) {
			$idProductoItem = $row['id_producto_item'];
			unset( $row['id_producto_item'] );
			unset( $row['id_recepcion_mercaderia_campana'] );

			$row['observaciones'] = str_replace('<br /><br />', '', $row['observaciones']);	
			$row['observaciones'] = ( substr( $row['observaciones'], 0, 6 ) == '<br />' ) ? substr( $row['observaciones'], 6 ) : $row['observaciones'];
			$row['observaciones'] = trim($row['observaciones']);
			
			$results[ $idProductoItem ] = $row;
		}

		return $results;
    }

	/**
	* Retorna un array con key idProductoItem y value cantidad total recibida
	* 
	* @param $idCampana
	*
	* @return array
	*/
    public function conteoProductosRecibidos($idCampana)
    {
    	return $this->createQuery('rmc')
    				->select('rmc.id_producto_item, sum(cantidad)')
					->addWhere('rmc.id_campana = ?', $idCampana)
					->groupBy('rmc.id_producto_item')
					->execute( array(), 'HYDRATE_KEY_VALUE_PAIR' );
	}

	/**
	* Retorna true si la marca recibio mercaderia de la campaña alguna vez
	* 
	* @param $idCampana
	* @param $idMarca
	*
	* @return bool
	*/
    public function fueRecepcionada($idCampana, $idMarca)
    {
    	return $this->createQuery('rmc')
    				->innerJoin('rmc.productoItem pi')
    				->innerJoin('pi.producto p')
					->addWhere('rmc.id_campana = ?', $idCampana)
					->addWhere('p.id_marca = ?', $idMarca)
					->count();
	}

	/**
	* Retorna un array con los ids de los pedidos que pueden ser enviados
	* dado que la mercaderia fue recibida
	* 
	* @param $idCampana
	* @param $idMarca
	*
	* @return array
	*/
	public function getIdsPedidosEnviables( $idCampana )
	{
	    $pendientes = pedidoTable::getInstance()->listPendientesEnvioByIdCampana( $idCampana );
	    $enviados = pedidoProductoItemTable::getInstance()->conteoProductosEnviadosByIdCampana( $idCampana );
	    $recibidos = recepcionMercaderiaCampanaTable::getInstance()->conteoProductosRecibidos( $idCampana );

	    $disponible = array();
	    foreach ($recibidos as $idsProductoItem => $cantidadRecibida) {
	      $cantidadEnviada = ( isset( $enviados[$idsProductoItem] ) ) ? $enviados[$idsProductoItem] : 0;
	      $cantidadDisponible = $cantidadRecibida - $cantidadEnviada;
	      $disponible[ $idsProductoItem ] = $cantidadDisponible;
	    }

	    $faltantes = faltanteTable::getInstance()->getDataByIdCampana( $idCampana );

	    $pedidoEnviables = array();

	    foreach ($pendientes as $pedido) {

	      $pedidoProductoItems = $pedido->getPedidoProductoItem();

	      $disponibleConfirmado = $disponible;
	      $cumpleStock = true;
	      foreach ($pedidoProductoItems as $pedidoProductoItem) {

	      	$producto = $pedidoProductoItem->getProductoItem()->getProducto();
	      	$idProductoItem = $pedidoProductoItem->getIdProductoItem();
	      	
	        $cantidadFaltante = ( isset( $faltantes[ $pedido->getIdPedido() ][ $idProductoItem ] ) ) ? $faltantes[ $pedido->getIdPedido() ][ $idProductoItem ] : 0;
	        $cantidadNecesaria =  $pedidoProductoItem->getCantidad() - $cantidadFaltante;
	        $cantidadDisponible = ( isset( $disponible[ $idProductoItem ] ) ) ? $disponible[ $idProductoItem ] : 0;

			if ( $cantidadNecesaria > $cantidadDisponible ) {
			  $cumpleStock = false;
			  break;
			} else {
			  if ( isset( $disponible[ $idProductoItem ] ) ) {
			  	$disponible[ $idProductoItem ] = $disponible[ $idProductoItem ] - $cantidadNecesaria;	
			  } else {
			  	$disponible[ $idProductoItem ] = 0;
			  }
			}
	      }

	      if ( $cumpleStock ) {
	        $pedidoEnviables[] = $pedido->getIdPedido();
	      } else {
	        $disponible = $disponibleConfirmado;
	      } 

	    }

	    return $pedidoEnviables;
	}

}