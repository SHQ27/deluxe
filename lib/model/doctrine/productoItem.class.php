<?php

/**
 * productoItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class productoItem extends BaseproductoItem
{	
    public function preDelete($event)
    {    	
    	stockTable::getInstance()->deleteByIdProductoItem( $this->getIdProductoItem() );
    }
    
	public function getCurrentStock()
	{		    
		$cantidadEnCarrito = carritoProductoItemTable::getInstance()->getCantidadByIdProductoItem( $this->getIdProductoItem()  );
		return $this->getStock() - $cantidadEnCarrito;		
	}
	
	public function getMyCurrentStock()
	{				
		$session = sessionTable::getInstance()->getSession();
		
		$cantidadEnCarrito = carritoProductoItemTable::getInstance()->getCantidadByIdProductoItemAndSession( $this->getIdProductoItem(), $session->getIdSession() );
		return $this->getStock() - $cantidadEnCarrito;
	}
	
	public function sumaStock($cantidad, $origen, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{	    
	    if ( !$cantidad ) return;

	    $esSumaPorBajaPedido = $idStockTipo == stockTipo::SISTEMA_BAJA_PEDIDO;

    	if ( $esSumaPorBajaPedido ) {
    		$method = 'sumaStockBajaPedido' . $origen;
			$this->$method( $cantidad, $idStockTipo, $idPedidoProductoItem, $observacion );
    	} else {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $cantidad );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( $origen );
			$stock->save();
		}

		$this->updateStock();
	}
	
	public function sumaStockBajaPedidoSTKPER($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stockResfuerzoActual = $this->getStockRefuerzo();
		$stockResfuerzoOriginal = stockTable::getInstance()->getUltimoRefuerzo( $this->getIdProductoItem() );
		$stockResfuerzoDiferencia = $stockResfuerzoOriginal - $stockResfuerzoActual;

		if ( $stockResfuerzoDiferencia >= $cantidad ) {
			$sumaEnRefuerzo = $cantidad;
			$sumaEnPermanente = 0;
		} else {
			$sumaEnRefuerzo = $stockResfuerzoDiferencia;
			$sumaEnPermanente = $cantidad - $stockPermanenteActual;
		}

		if ( $sumaEnPermanente ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $sumaEnPermanente );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_STOCK_PERMANENTE );
			$stock->save();			
		}

		if ( $sumaEnRefuerzo ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $sumaEnRefuerzo );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_REFUERZO );
			$stock->save();			
		}
	}

	public function sumaStockBajaPedidoOFERTA($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stockResfuerzoActual = $this->getStockRefuerzo();
		$stockResfuerzoOriginal = stockTable::getInstance()->getUltimoRefuerzo( $this->getIdProductoItem() );
		$stockResfuerzoDiferencia = $stockResfuerzoOriginal - $stockResfuerzoActual;

		if ( $stockResfuerzoDiferencia >= $cantidad ) {
			$sumaEnRefuerzo = $cantidad;
			$sumaEnCampana = 0;
		} else {
			$sumaEnRefuerzo = $stockResfuerzoDiferencia;
			$sumaEnCampana = $cantidad - $stockCampanaActual;
		}

		if ( $sumaEnCampana ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $sumaEnCampana );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_OFERTA );
			$stock->save();			
		}

		if ( $sumaEnRefuerzo ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $sumaEnRefuerzo );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_REFUERZO );
			$stock->save();			
		}
	}

	public function sumaStockBajaPedidoOUTLET($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stock = new stock();
		$stock->setIdProductoItem( $this->getIdProductoItem() );
		$stock->setCantidad( $cantidad );
		$stock->setIdStockTipo( $idStockTipo );		
		$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
		$stock->setObservacion( $observacion );
		$stock->setOrigen( producto::ORIGEN_OUTLET );
		$stock->save();
	}

	public function restaStock($cantidad, $origen, $idStockTipo, $idPedidoProductoItem, $observacion = null )
	{
	    if ( !$cantidad ) return;

	    $esRestaPorVenta = $idStockTipo == stockTipo::SISTEMA_VENTA;
	    $esRestaPorReactivacion = $idStockTipo == stockTipo::SISTEMA_REACTIVACION_PEDIDO;

    	if ( $esRestaPorVenta || $esRestaPorReactivacion ) {
    		$method = 'restaStockVenta' . $origen;
			$this->$method( $cantidad, $idStockTipo, $idPedidoProductoItem, $observacion );
    	} else {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $cantidad * (-1) );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( $origen );
			$stock->save();
    	}

		$this->updateStock();

		/* 
		* Si el producto es de eshop y esta agotado
		* se elimina el ordenamiento de eshops
		*/
		$producto = $this->getProducto();
		if ( $producto->getIdEshop() && $producto->estaAgotado() ) {
			$producto->setOrdenEshop( null );
			$producto->save();
		}
	}

	public function restaStockVentaSTKPER($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stockPermanenteActual = $this->getStockPermanente();

		if ( $stockPermanenteActual >= $cantidad ) {
			$restaEnPermanente = $cantidad;
			$restaEnRefuerzo = 0;
		} else {
			$restaEnPermanente = $stockPermanenteActual;
			$restaEnRefuerzo = $cantidad - $stockPermanenteActual;
		}

		if ( $restaEnPermanente ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $restaEnPermanente * (-1) );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_STOCK_PERMANENTE );
			$stock->save();			
		}

		if ( $restaEnRefuerzo ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $restaEnRefuerzo * (-1) );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_REFUERZO );
			$stock->save();			
		}
	}

	public function restaStockVentaOFERTA($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stockCampanaActual = $this->getStockCampana();

		if ( $stockCampanaActual >= $cantidad ) {
			$restaEnCampana = $cantidad;
			$restaEnRefuerzo = 0;
		} else {
			$restaEnCampana = $stockCampanaActual;
			$restaEnRefuerzo = $cantidad - $stockCampanaActual;
		}

		if ( $restaEnCampana ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $restaEnCampana * (-1) );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_OFERTA );
			$stock->save();			
		}

		if ( $restaEnRefuerzo ) {
			$stock = new stock();
			$stock->setIdProductoItem( $this->getIdProductoItem() );
			$stock->setCantidad( $restaEnRefuerzo * (-1) );
			$stock->setIdStockTipo( $idStockTipo );
			$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
			$stock->setObservacion( $observacion );
			$stock->setOrigen( producto::ORIGEN_REFUERZO );
			$stock->save();			
		}
	}

	public function restaStockVentaOUTLET($cantidad, $idStockTipo, $idPedidoProductoItem = null, $observacion = null )
	{
		$stock = new stock();
		$stock->setIdProductoItem( $this->getIdProductoItem() );
		$stock->setCantidad( $cantidad * (-1) );
		$stock->setIdStockTipo( $idStockTipo );
		$stock->setIdPedidoProductoItem( $idPedidoProductoItem );
		$stock->setObservacion( $observacion );
		$stock->setOrigen( producto::ORIGEN_OUTLET );
		$stock->save();
	}
	
	public function updateStock()
	{
	    $stockPermanente = stockTable::getInstance()->getStockDisponible( $this->getIdProductoItem(), producto::ORIGEN_STOCK_PERMANENTE );
	    $stockCampana    = stockTable::getInstance()->getStockDisponible( $this->getIdProductoItem(), producto::ORIGEN_OFERTA );
	    $stockOutlet     = stockTable::getInstance()->getStockDisponible( $this->getIdProductoItem(), producto::ORIGEN_OUTLET );
	    $stockRefuerzo   = stockTable::getInstance()->getStockDisponible( $this->getIdProductoItem(), producto::ORIGEN_REFUERZO );
	    	    
	    $this->setStockCampana   ( $stockCampana );
	    $this->setStockOutlet    ( $stockOutlet );
	    $this->setStockPermanente( $stockPermanente );
	    $this->setStockRefuerzo( $stockRefuerzo );
	    
	    // Actualizo el Stock actual
	    $origenActual = $this->getProducto()->getOrigen();
	     
		switch ( $origenActual )
	    {
	        case producto::ORIGEN_OFERTA:             $this->setStock( $stockCampana + $stockRefuerzo ); break;
            case producto::ORIGEN_STOCK_PERMANENTE:   $this->setStock( $stockPermanente + $stockRefuerzo ); break;
            case producto::ORIGEN_OUTLET:             $this->setStock( $stockOutlet ); break;
            default:                                  $this->setStock( 0 ); break;
	    }
	    
	    $this->save();
	    
	    MercadoLibre::getInstance()->actualizarProducto( $this->getProducto() );
	}
	
	public function remplazarStock($cantidad, $origen, $idStockTipo)
	{
	    if ( is_numeric( $cantidad ) )
	    {	    
    	    if ( $origen == producto::ORIGEN_STOCK_PERMANENTE ) {
    	       $cantidadInicial = $this->getStockPermanente();
    	    } else if ( $origen == producto::ORIGEN_OFERTA ) {
    	       $cantidadInicial = $this->getStockCampana();
            } else if ( $origen == producto::ORIGEN_OUTLET ) {
    	        $cantidadInicial = $this->getStockOutlet();
            } else if ( $origen == producto::ORIGEN_REFUERZO ) {
    	        $cantidadInicial = $this->getStockRefuerzo();
    	    }
    	    
            $cantidadCalculada = $cantidad - $cantidadInicial;
        
            if ( $cantidadCalculada > 0 ) {
                $this->sumaStock($cantidadCalculada, $origen, $idStockTipo);
            } else {
                $this->restaStock(abs($cantidadCalculada), $origen, $idStockTipo);
            }   
	    }
	}
		
}
