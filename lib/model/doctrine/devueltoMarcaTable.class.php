<?php

/**
 * devueltoMarcaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class devueltoMarcaTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object devueltoMarcaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('devueltoMarca');
    }
    
    /**
     * Retorna un array con toda la informacion del listado de fallados
     *
     * @param integer $idMarca
     * @param string $fechaDesde
     * @param string $fechaHasta
     *
     * @return array
     */
    public function queryDevueltosMarcas($idMarca, $fechaDesde, $fechaHasta, $devuelto = false, $sort  = null, $sortType = null )
    {
        $q =  $this->createQuery('dm')
        ->select( 'dm.id_devuelto_marca, pi.id_producto_item, ppi.id_producto_item')
        ->addSelect( 'm.nombre as marca' )
        ->addSelect( '(SELECT MIN(pim.id_producto_imagen) FROM productoImagen pim WHERE pim.id_producto = p.id_producto) as id_producto_imagen' )
        ->addSelect( 'pi.codigo as codigo' )
        ->addSelect( 'p.id_producto as id_producto' )
        ->addSelect( 'p.denominacion as denominacion' )
        ->addSelect( 'pt.denominacion as talle' )
        ->addSelect( 'pc.denominacion as color' )
        ->addSelect( 'ppi.costo as costo' )
        ->addSelect( 'count(pi.id_producto_item) as cantidad' )
        ->addSelect( 'GROUP_CONCAT(dm.id_devuelto_marca) as id_devueltos_marcas' )
        ->innerJoin( 'dm.pedidoProductoItem ppi' )
        ->innerJoin( 'dm.productoItem pi' )
        ->innerJoin( 'pi.producto p' )
        ->innerJoin( 'pi.productoColor pc' )
        ->innerJoin( 'pi.productoTalle pt' )
        ->innerJoin( 'p.marca m' )
        ->addWhere( 'ppi.costo > 0' )
        ->addWhere( 'dm.devuelto = ?', $devuelto )
        ->orderBy( "m.nombre asc, p.denominacion asc" )
        ->groupBy('m.nombre, p.id_producto, p.codigo, p.denominacion, pt.denominacion, pc.denominacion, ppi.costo');
    
        // Filtro por Marca
        if ( $idMarca )
        {
            $q->addWhere( 'm.id_marca = ?', $idMarca );
        }
    
        // Filtro por fecha
        if ( $fechaDesde ) $q->addWhere( 'dm.fecha >= ?', $fechaDesde );
        if ( $fechaHasta ) $q->addWhere( 'dm.fecha <= ?', $fechaHasta );
    
        return $q;
    }
    
    /**
     * Retorna el listado de los productos seleccionados a devolver
     *
     * @param array $ids
     *
     * @return array
     */
    public function listXDevolver($ids)
    {
        return $this->createQuery('dm')
                    ->select( 'dm.id_devuelto_marca, pi.id_producto_item, ppi.id_producto_item')
                    ->addSelect( 'dm.id_devuelto_marca as id_devuelto_marca' )
                    ->addSelect( 'dm.fecha as fecha' )
                    ->addSelect( 'm.nombre as marca' )
                    ->addSelect( 'pi.codigo as codigo' )
                    ->addSelect( 'p.id_producto as id_producto' )
                    ->addSelect( '(SELECT MIN(pim.id_producto_imagen) FROM productoImagen pim WHERE pim.id_producto = p.id_producto) as id_producto_imagen' )
                    ->addSelect( 'p.denominacion as denominacion' )
                    ->addSelect( 'pt.denominacion as talle' )
                    ->addSelect( 'pc.denominacion as color' )
                    ->addSelect( 'ppi.costo as costo' )
                    ->innerJoin( 'dm.pedidoProductoItem ppi' )
                    ->innerJoin( 'ppi.productoItem pi' )
                    ->innerJoin( 'pi.producto p' )
                    ->innerJoin( 'pi.productoColor pc' )
                    ->innerJoin( 'pi.productoTalle pt' )
                    ->innerJoin( 'p.marca m' )
                    ->whereIn('dm.id_devuelto_marca', $ids)
                    ->fetchArray();
    }


    public function marcarDevueltos($devueltos)
    {
        $this->createQuery('dm')
             ->update('devueltoMarca dm')
             ->set('dm.devuelto', true)
             ->whereIn('dm.id_devuelto_marca', $devueltos)
             ->execute();
    }
    
}