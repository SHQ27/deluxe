<?php

/**
 * Basemarca
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_marca
 * @property string $nombre
 * @property string $backstage_url
 * @property integer $id_marca_rubro
 * @property string $condicion_fiscal
 * @property string $email_comercial
 * @property marcaRubro $marcaRubro
 * @property Doctrine_Collection $producto
 * @property Doctrine_Collection $campanaMarca
 * @property Doctrine_Collection $pedidoProductoItemCampana
 * @property Doctrine_Collection $talleSet
 * @property Doctrine_Collection $eshop
 * 
 * @method integer             getIdMarca()                   Returns the current record's "id_marca" value
 * @method string              getNombre()                    Returns the current record's "nombre" value
 * @method string              getBackstageUrl()              Returns the current record's "backstage_url" value
 * @method integer             getIdMarcaRubro()              Returns the current record's "id_marca_rubro" value
 * @method string              getCondicionFiscal()           Returns the current record's "condicion_fiscal" value
 * @method string              getEmailComercial()            Returns the current record's "email_comercial" value
 * @method marcaRubro          getMarcaRubro()                Returns the current record's "marcaRubro" value
 * @method Doctrine_Collection getProducto()                  Returns the current record's "producto" collection
 * @method Doctrine_Collection getCampanaMarca()              Returns the current record's "campanaMarca" collection
 * @method Doctrine_Collection getPedidoProductoItemCampana() Returns the current record's "pedidoProductoItemCampana" collection
 * @method Doctrine_Collection getTalleSet()                  Returns the current record's "talleSet" collection
 * @method Doctrine_Collection getEshop()                     Returns the current record's "eshop" collection
 * @method marca               setIdMarca()                   Sets the current record's "id_marca" value
 * @method marca               setNombre()                    Sets the current record's "nombre" value
 * @method marca               setBackstageUrl()              Sets the current record's "backstage_url" value
 * @method marca               setIdMarcaRubro()              Sets the current record's "id_marca_rubro" value
 * @method marca               setCondicionFiscal()           Sets the current record's "condicion_fiscal" value
 * @method marca               setEmailComercial()            Sets the current record's "email_comercial" value
 * @method marca               setMarcaRubro()                Sets the current record's "marcaRubro" value
 * @method marca               setProducto()                  Sets the current record's "producto" collection
 * @method marca               setCampanaMarca()              Sets the current record's "campanaMarca" collection
 * @method marca               setPedidoProductoItemCampana() Sets the current record's "pedidoProductoItemCampana" collection
 * @method marca               setTalleSet()                  Sets the current record's "talleSet" collection
 * @method marca               setEshop()                     Sets the current record's "eshop" collection
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basemarca extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('marca');
        $this->hasColumn('id_marca', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nombre', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('backstage_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('id_marca_rubro', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('condicion_fiscal', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => 3,
             ));
        $this->hasColumn('email_comercial', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));


        $this->index('ix_marca_slug', array(
             'fields' => 
             array(
              0 => 'slug',
             ),
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('marcaRubro', array(
             'local' => 'id_marca_rubro',
             'foreign' => 'id_marca_rubro',
             'owningSide' => true));

        $this->hasMany('producto', array(
             'local' => 'id_marca',
             'foreign' => 'id_marca'));

        $this->hasMany('campanaMarca', array(
             'local' => 'id_marca',
             'foreign' => 'id_marca'));

        $this->hasMany('pedidoProductoItemCampana', array(
             'local' => 'id_marca',
             'foreign' => 'id_marca'));

        $this->hasMany('talleSet', array(
             'local' => 'id_marca',
             'foreign' => 'id_marca'));

        $this->hasMany('eshop', array(
             'local' => 'id_marca',
             'foreign' => 'id_marca'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'nombre',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($sluggable0);
    }
}