<?php

/**
 * pedido
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class pedido extends Basepedido
{
    CONST PRODUCTO_TIPO_OFERTA = 'OFERT';
    CONST PRODUCTO_TIPO_OUTLET = 'OUTLE';
    CONST PRODUCTO_TIPO_STOCK_PERMANENTE = 'STKPE';
    
    CONST INTEVENCION_MANUAL_NO_REQUIERE = 0;
    CONST INTEVENCION_MANUAL_REQUIERE_ALTA = 1;
    CONST INTEVENCION_MANUAL_REQUIERE_LEVE= 2;


    /**
     * Es la fecha limite que se le muestra al cliente cuando paga en forma offline en los mails y recordatorios
     * @return timestamp
     */
    public function getFechaLimiteConTolerancia( $format = 'Y-m-d H:i:s' )
    {
        $fechaLimite = $this->getFechaLimite();
        
        $timestamp = pmDateHelper::getInstance()->restarDiasHabiles( sfConfig::get('app_pedido_diasTolerancia'), 'U', strtotime($fechaLimite) );

        $fechaLimiteConTolerancia = new DateTime();
        $fechaLimiteConTolerancia->setTimestamp( $timestamp );
        return $fechaLimiteConTolerancia->format( $format );
    }


    /**
     * Retorna la fecha de la primera campaña, si existe, de lo contrario retorna la fecha del pedido + x
     * @return timestamp
     */
    public function getFechaLimite( $format = 'Y-m-d H:i:s' )
    {
        $fechaLimite =  campanaTable::getInstance()->getFechaPrimeraCampanaByIdPedido( $this->getIdPedido() );

        if ($fechaLimite)
        {
            $fechaLimite = new DateTime( $fechaLimite );
            $fechaLimite = $fechaLimite->format( $format );
        }
        else
        {
            $segundosXDia = 60 * 60 * 24;
            $limite = strtotime($this->getFechaAlta()) + $segundosXDia * sfConfig::get('app_pedido_diasPedidoPermanente');
            $fechaLimite = date($format, $limite);
        }

        return $fechaLimite;
    }

    /**
     * Retorna la fecha limite extendida. Se le suma la cantidad de minutos en el common.yml
     * @return timestamp
     */
    public function getFechaLimiteExtendida( $format = 'Y-m-d H:i:s' )
    {
        $timestamp =  $this->getFechaLimite('U');
        $minutosFechaLimiteExtendida = (int) sfConfig::get('app_pedido_minutosFechaLimiteExtendida');

        $day = date('d', $timestamp);
        $month = date('m', $timestamp);
        $year = date('Y', $timestamp);
        $hour = date('H', $timestamp);
        $min = date('i', $timestamp);

        $timestamp = mktime($hour, $min + $minutosFechaLimiteExtendida, 0, $month, $day, $year);

        return date($format, $timestamp);
    }

    /**
     * Retorna la fecha de la ultima campaña, si existe, de lo contrario retorna false
     * @return timestamp
     */
    public function getFechaUltimaCampana( $format = 'Y-m-d H:i:s' )
    {
        $fechaUltimaCampana =  campanaTable::getInstance()->getFechaUltimaCampanaByIdPedido( $this->getIdPedido() );

        if ($fechaUltimaCampana)
        {
            $fechaUltimaCampana = new DateTime( $fechaUltimaCampana );
            $fechaUltimaCampana = $fechaUltimaCampana->format( $format );
        }

        return $fechaUltimaCampana;
    }

    /**
     * Retorna la informacion sobre la fecha estimada de entrega y su observacion adjunta
     *
     * @return Array
     */
    public function getEstimacionEntrega($mostrarObservacion = false)
    {
        if ( $this->getIdEshop() ) {
            return 'Envío en 96hs Hábiles';
        }
        
        if ( $this->getTipoProducto() == self::PRODUCTO_TIPO_OFERTA )
        {
            
            $campana =  campanaTable::getInstance()->getCampanaEstimacionEntregaByIdPedido( $this->getIdPedido() );

            if ( $campana && $campana->getIdCampana() == 2776 ) {
                return 'FECHA ESTIMADA DE ENVÍO ENTRE EL 06 DE NOVIEMBRE Y EL 14 DE NOVIEMBRE.';
            }

            if ( $campana && $campana->getIdCampana() == 2798 ) {
                return 'FECHA ESTIMADA DE ENVÍO ENTRE EL 13 DE NOVIEMBRE Y EL 21 DE NOVIEMBRE.';
            }

            if ( $mostrarObservacion && trim($campana->getEstimacionEnvioObservacion()) )
            {
                return $campana->getEstimacionEnvioObservacion();
            }
            else if ( $campana->getEstimacionEnvioFecha() )
            {
                return 'Fecha estimada de envío: ' . strftime('%e de %B', strtotime($campana->getEstimacionEnvioFecha()));
            }
            elseif ( $campana->getEstimacionEnvioHoras() )
            {
                return 'Envío en ' . $campana->getEstimacionEnvioHoras() . 'hs Hábiles';
            }
            else
            {
                $timestampFechaFinCampana = strtotime($campana->getFechaFin());
                $desde = pmDateHelper::getInstance()->sumarDiasHabiles( 5, 'Y-m-d', $timestampFechaFinCampana );
                $hasta = pmDateHelper::getInstance()->sumarDiasHabiles( 10, 'Y-m-d', $timestampFechaFinCampana );
                
                return 'Fecha estimada de envío entre el ' . strftime('%e de %B', strtotime($desde)) . ' y el ' . strftime('%e de %B', strtotime($hasta)) . '.';
            }
            
        }
        else if ( $this->getTipoProducto() == self::PRODUCTO_TIPO_OUTLET )
        {
            
            $outletData = configuracionTable::getInstance()->getOutlet();
            $outletData = json_decode($outletData->getValor(), true);
        
            if ( $outletData['estimacion_envio_fecha'] )
            {
                return 'Fecha estimada de envío: ' . strftime('%e de %B', strtotime( $outletData['estimacion_envio_fecha'] ));
            }
            elseif ( $outletData['estimacion_envio_horas'] )
            {
                return 'Envío en ' . $outletData['estimacion_envio_horas'] . 'hs Hábiles';
            }
            else
            {
                $timestampFechaFin = strtotime( $outletData['fecha_fin'] );
        
                $desde = pmDateHelper::getInstance()->sumarDiasHabiles( 5, 'Y-m-d',  $timestampFechaFin);
                $hasta = pmDateHelper::getInstance()->sumarDiasHabiles( 10, 'Y-m-d', $timestampFechaFin );
        
                return 'Fecha estimada de envío entre el ' . strftime('%e de %B', strtotime($desde)) . ' y el ' . strftime('%e de %B', strtotime($hasta)) . '.';
            }
            
        }
        else
        {
            
            if ( $this->getFechaPago() )
            {
                $timestampFechaPago = strtotime( $this->getFechaPago() );
                $desde = pmDateHelper::getInstance()->sumarDiasHabiles( 5, 'Y-m-d', $timestampFechaPago );
                $hasta = pmDateHelper::getInstance()->sumarDiasHabiles( 10, 'Y-m-d', $timestampFechaPago );
            
                return 'Fecha estimada de envío entre el ' . strftime('%e de %B', strtotime($desde)) . ' y el ' . strftime('%e de %B', strtotime($hasta)) . '.';
            }
            
        }
        
        return false;
    }


    public function tieneMezcla()
    {
        return pedidoProductoItemTable::getInstance()->hayMezcla( $this->getIdPedido() );
    }

    public function tieneOfertas()
    {
        if ( isset($this->tiene_ofertas_calculado) )
        {
            return $this->getTieneOfertasCalculado();
        }
        else
        {
            return pedidoProductoItemTable::getInstance()->tieneOfertas( $this->getIdPedido() );
        }

    }

    public function tieneOutlet()
    {
        if ( isset($this->tiene_outlet_calculado) )
        {
            return $this->getTieneOutletCalculado();
        }
        else
        {
            return pedidoProductoItemTable::getInstance()->tieneOutlet( $this->getIdPedido() );
        }
    }

    public function tieneSoloStockPermanente()
    {
        return !$this->tieneOfertas();
    }

    public function tieneSoloOfertas()
    {
        return pedidoProductoItemTable::getInstance()->tieneSoloOfertas( $this->getIdPedido() );
    }


    public function getPeso()
    {
        return pedidoProductoItemTable::getInstance()->getPesoByIdPedido( $this->getIdPedido() );
    }


    public function procesarBajaManual( $gestionarStock = true )
    {
        $conn = Doctrine_Manager::connection();

        try
        {
            $conn->beginTransaction();

            $this->procesarBaja('Baja Manual desde Backend. Pedido #' . $this->getIdPedido(), $gestionarStock);

            $pagoNotificacion = new pagoNotificacion();
            $pagoNotificacion->setIdFormaPago( $this->getIdFormaPago() );
            $pagoNotificacion->setMetodo(pagoNotificacion::MANUAL);
            $pagoNotificacion->setIdPedido( $this->getIdPedido() );
            $pagoNotificacion->setResponse( null);
            $pagoNotificacion->setProcesado(true);
            $pagoNotificacion->setMensaje( 'Se realizó la baja manual de este pedido desde el backend.' );
            $pagoNotificacion->save();

            $conn->commit();

            return true;
        }
        catch(Doctrine_Exception $e)
        {
            $conn->rollback();
            return false;
        }

    }

    public function procesarBaja( $observacion = null, $gestionarStock = true, $devolverBonificaciones = true, $devolverDescuentos = true  )
    {
        $conn = Doctrine_Manager::connection();

        // Previene que se de de baja dos veces seguidas.
        if ( $this->getFechaBaja() ) {
            return false;
        }
        
        $now = date('Y-m-d H:i:s');
        $this->setFechaBaja( $now );
        $this->save();
        
        try
        {
            $conn->beginTransaction();

            if ( $devolverBonificaciones )
            {
                $pedidobonificaciones = $this->getPedidoBonificacion();
                foreach ($pedidobonificaciones as $pedidobonificacion)
                {
                    $pedidobonificacion->getBonificacion()->devolver();
                }
            }

            if ( $devolverDescuentos )
            {
                $pedidoDescuentos = $this->getPedidoDescuento();
                foreach ($pedidoDescuentos as $pedidoDescuento)
                {
                    $pedidoDescuento->getDescuento()->devolver();
                }
            }
            	
            if ( $gestionarStock )
            {
                if ( $observacion === null )
                {
                    $observacion = 'Baja del Pedido #' . $this->getIdPedido();
                }


                $pedidoProductoItems = $this->getPedidoProductoItem();
                foreach ($pedidoProductoItems as $pedidoProductoItem)
                {
                    $productoItem = $pedidoProductoItem->getProductoItem();
                    
                    /*
                     * Cuando la baja del pedido proviene de un producto stock permanente u outlet
                     */
                    if ( $pedidoProductoItem->esStockPermanente() || $pedidoProductoItem->esOutlet() )
                    {
                        $productoItem->sumaStock( $pedidoProductoItem->getCantidad(), $pedidoProductoItem->getOrigen(), stockTipo::SISTEMA_BAJA_PEDIDO, null, $observacion );
                    }
                    /*
                     * Cuando la baja del pedido proviene de una campaña, se descuenta solo si esta activa.
                     * Puesto que de otra manera no es necesario ya que al finalizar una campaña su stock es reseteado
                     */ 
                    else if ( $pedidoProductoItem->tieneCampanaActiva() )
                    {
                        $productoItem->sumaStock( $pedidoProductoItem->getCantidad(), producto::ORIGEN_OFERTA, stockTipo::SISTEMA_BAJA_PEDIDO, null, $observacion );
                    }
                }
            }

            $conn->commit();
            	
            return true;
        }
        catch(Doctrine_Exception $e)
        {
            $pedidoEnBaseDeDatos = pedidoTable::getInstance()->getByIdPedido( $this->getIdPedido() );
            
            if ( $pedidoEnBaseDeDatos->getFechaBaja() == $now )
            {
                $this->setFechaBaja( null );
                $this->save();
            }
            
            $conn->rollback();
            return false;
        }
    }

    public function procesarAltaManual($gestionarStock = true)
    {
        $response = $this->procesarReactivacion($gestionarStock, true, true, false, true);

        if (  $response['status'] !== true )
        {
            sfContext::getInstance()->getUser()->setFlash("error", $response['message']);
            return false;
        }

        return true;
    }

    public function procesarReactivacion($gestionarStock = true, $devolverBonificaciones = true, $devolverDescuentos = true , $verificarFueraDePlazo = true, $fueManual = false)
    {
        $conn = Doctrine_Manager::connection();
        try
        {
            $conn->beginTransaction();
            
            if ( $verificarFueraDePlazo && $this->getFechaLimitePago() <= date('Y-m-d H:i:s') )
            {
                $conn->rollback();
                return array('status' => false, 'message' => 'No se puede reactivar el pedido ya que se superó la fecha limite para su pago.', 'tipoIntervencionManual' => pedido::INTEVENCION_MANUAL_REQUIERE_LEVE );
            }
            
            $this->setFechaBaja( null );
            $this->save();

            if ( $devolverBonificaciones )
            {
                $pedidobonificaciones = $this->getPedidoBonificacion();
                foreach ($pedidobonificaciones as $pedidobonificacion)
                {
                    $bonificacion = $pedidobonificacion->getBonificacion();

                    if ( $bonificacion->getFueUtilizada() )
                    {
                        $conn->rollback();
                        return array('status' => false, 'message' => 'No se pudo dar de alta el pedido. La bonificacion #' .  $bonificacion->getIdBonificacion() . ' ya fue utilizada con anterioridad', 'tipoIntervencionManual' => pedido::INTEVENCION_MANUAL_REQUIERE_ALTA );
                    }

                    $bonificacion->utilizar();
                }
            }

            if ( $devolverDescuentos )
            {
                $pedidoDescuentos = $this->getPedidoDescuento();
                foreach ($pedidoDescuentos as $pedidoDescuento)
                {
                    $descuento = $pedidoDescuento->getDescuento();

                    $disponibles = $descuento->getTotal() - $descuento->getUtilizados();
                    if ( $disponibles < 1 )
                    {
                        $conn->rollback();
                        return array('status' => false, 'message' => 'No se pudo dar de alta el pedido. El descuento con el codigo ' .  $descuento->getCodigo() . ' no tiene más disponibilidad.', 'tipoIntervencionManual' => pedido::INTEVENCION_MANUAL_REQUIERE_ALTA );
                    }

                    $descuento->utilizar();
                }
            }

            	
            if ( $gestionarStock )
            {
                $pedidoProductoItems = $this->getPedidoProductoItem();
                foreach ($pedidoProductoItems as $pedidoProductoItem)
                {
                    $productoItem = $pedidoProductoItem->getProductoItem();
        

                    switch ( $pedidoProductoItem->getOrigen() )
                    {
                        case producto::ORIGEN_OFERTA:
                            $cantidadDisponible = $productoItem->getStockCampana() + $productoItem->getStockRefuerzo();
                            break;
                        case producto::ORIGEN_STOCK_PERMANENTE:
                            $cantidadDisponible = $productoItem->getStockPermanente() + $productoItem->getStockRefuerzo();
                            break;
                        case producto::ORIGEN_OUTLET:
                            $cantidadDisponible = $productoItem->getStockOutlet();
                            break;
                    }
                    
                    if ( $cantidadDisponible < $pedidoProductoItem->getCantidad() )
                    {
                        $conn->rollback();
                        return array('status' => false, 'message' => 'No se pudo dar de alta el pedido. No hay stock disponible', 'tipoIntervencionManual' => pedido::INTEVENCION_MANUAL_REQUIERE_ALTA );
                    }

                    $productoItem->restaStock( $pedidoProductoItem->getCantidad(), $pedidoProductoItem->getOrigen(), stockTipo::SISTEMA_REACTIVACION_PEDIDO, null, 'Pedido #' . $this->getIdPedido() );
                }
            }

            if ( $fueManual )
            {
                $pagoNotificacion = new pagoNotificacion();
                $pagoNotificacion->setIdFormaPago( $this->getIdFormaPago() );
                $pagoNotificacion->setMetodo(pagoNotificacion::MANUAL);
                $pagoNotificacion->setIdPedido( $this->getIdPedido() );
                $pagoNotificacion->setResponse( null);
                $pagoNotificacion->setProcesado(true);                	
                $pagoNotificacion->setMensaje( 'Se realizó la reactivacion manual de este pedido desde el backend.' );
                $pagoNotificacion->save();
            }

            $conn->commit();

            return array('status' => true);
        }
        catch(Doctrine_Exception $e)
        {
            $conn->rollback();
            return array('status' => false, 'message' => 'ProcesarReactivacion - Error: ' . $e->getMessage(), 'tipoIntervencionManual' => pedido::INTEVENCION_MANUAL_REQUIERE_ALTA );
        }
    }

    public function marcarComoPagado() {
        $this->setFechaPago( new Doctrine_Expression('now()') );
        $this->sendToGoogleAnalytics();        
    }


    public function procesarPago($proveedorPagoResponse = null)
    {

        $conn = Doctrine_Manager::connection();
        
        try
        {
            $conn->beginTransaction();

            if( $proveedorPagoResponse && $proveedorPagoResponse['total'] > $this->getMontoTotal() )
            {
                $this->setInteres( $proveedorPagoResponse['total'] - $this->getMontoTotal() );
                $this->setMontoTotal( $proveedorPagoResponse['total'] );
                $this->setDatosPago( json_encode($proveedorPagoResponse) );
            }
            
            $this->marcarComoPagado();
            $this->save();
                        
            $usuario = $this->getUsuario();

            $invitacion = invitacionTable::getInstance()->findByIdUsuarioInvitado($usuario->getIdUsuario());
            if ($invitacion && $invitacion->getIdPedidoRealizado() === null) {
                $invitacion->setIdPedidoRealizado($this->getIdPedido());
                $invitacion->save();
            }

            // Suma ventas
            $pedidoProductoItems = $this->getPedidoProductoItem();
            foreach ($pedidoProductoItems as $pedidoProductoItem)
            {
                $pedidoProductoItem->getProductoItem()->getProducto()->sumaVenta( $pedidoProductoItem->getCantidad() );
            }
            
            // Envio el mail
            if ( $this->getIdEshop() ) {
                $eshop = $this->getEshop();
                $from = $eshop->getEmailNoReply();
                $tipoMail  = 'ESHOP';
            } else {
                $eshop = false;
                $from = sfConfig::get('app_email_from_noreply');
                $tipoMail  = 'DELUXE';
            }
            
            
            $subject = 'Resumen de tu pedido';
            $vars = array( 'eshop'   => $eshop, 'title' => $subject, 'pedido' => $this, 'usuario' => $usuario );
            $mailer = new Mailer('pagoProcesadoOK' . $tipoMail, $vars);
            $mailer->send( $subject, $usuario->getEmail(), $from );
            	
            // Anoto el pedido procesado en el reporte cronologico
            reporteCronologicoTable::getInstance()->save(reporteCronologico::PEDIDO, array( 'idPedido' => $this->getIdPedido() ) );
            	
            // Si el pedido fue realizado en Deluxe lo facturo
            if ( !$this->getIdEshop() ) {
                facturaTable::getInstance()->insert( $this->getIdPedido() );
            // Sino solo anoto el recibo
            } else {
                reciboEshopTable::getInstance()->insert( $this->getIdEshop(), array( $this->getIdPedido() ), $this->getMontoFacturacion(), reciboEshop::TIPO_FACTURA );
            }
            
            $conn->commit();

            // Actualiza la informacion del usuario en sendgrid
            Sendgrid::getInstance()->updateContact( $usuario );
            
            return true;
        }
        catch(Doctrine_Exception $e)
        {
            $conn->rollback();
            
            return false;
        }
    }

    public function enviarAvisoPagoOffline()
    {
        try
        {
            $usuario = $this->getUsuario();

            // Envio el aviso via mail
            if ( $this->getIdEshop() ) {
                $eshop = $this->getEshop();
                $from = $eshop->getEmailNoReply();
                $tipoMail  = 'ESHOP';
            } else {
                $eshop = false;
                $from = sfConfig::get('app_email_from_noreply');
                $tipoMail  = 'DELUXE';
            }
            
            $subject = 'Notificación importante sobre tu pedido ' . $this->getIdPedido();
            $vars = array( 'eshop'   => $eshop, 'title'   => $subject, 'pedido' => $this, 'usuario' => $usuario );
            $mailer = new Mailer('pagoAvisoOffline' . $tipoMail, $vars);
            $mailer->send( $subject, $usuario->getEmail(), $from );

            $this->setFechaAvisoPago(new Doctrine_Expression('now()'));
            $this->save();

            return true;
        }
        catch(Doctrine_Exception $e)
        {
            return false;
        }

    }

    public function getDescripcionFormaPago($separator = '<br/>')
    {
        $descripcion = $this->getFormaPago()->getDenominacion();

        if ( $this->getIdFormaPago() && $this->getIdFormaPago() == formaPago::MERCADOPAGO && $this->getDatosPago() )
        {
            $datosPago = $this->getArrayDatosPago();
            $descripcion .= $separator . $datosPago['modalidad'];
        }

        return $descripcion;
    }

    public function getArrayDatosPago()
    {
        return json_decode($this->getDatosPago(), true);
    }

    public function getEstado()
    {
        if ($this->getFechaBaja()) {
            return 'Dado de baja';
        }
        if ($this->getFechaEnvio()) {
            return 'Enviado';
        }
        if ($this->getFechaPago()) {
            return 'Pagado (pendiente de envío)';
        }
        return 'Pendiente';
    }

    public function getCodigoEstado()
    {
        if ($this->getFechaBaja()) {
            return 'BAJA';
        }
        if ($this->getFechaEnvio()) {
            return 'ENVI';
        }
        if ($this->getFechaPago()) {
            return 'PAGA';
        }
        return 'PEND';
    }

    public function getEnvioDomicilio()
    {
        return $this->getEnvioCalle() . ' ' . $this->getEnvioNumero() . ' ' . $this->getEnvioPiso() . ' ' . $this->getEnvioDepto();
    }

    public function getInteres()
    {
        $data = $this->getData();
        return ($data['interes'])? $data['interes'] : 0;
    }

    public function getFacturacion()
    {
        return $this->getMontoTotal() * 0.95;
    }

    public function getCostoProductos()
    {
        $pedidoProductoItems = $this->getPedidoProductoItem();

        $costoProductos = 0;
        foreach($pedidoProductoItems as $pedidoProductoItem)
        {
            $costoProductos += $pedidoProductoItem->getCosto() * $pedidoProductoItem->getCantidad();
        }

        return $costoProductos;
    }

    public function getGanancia()
    {
        return $this->getMontoProductos() - $this->getCostoProductos() - $this->getMontoBonificacion() - $this->getMontoDescuento();
    }

    public function hayStock()
    {
        $pedidoProductoItems = $this->getPedidoProductoItem();
        	
        foreach ($pedidoProductoItems as $pedidoProductoItem)
        {
            $productoItem = $pedidoProductoItem->getProductoItem();

            $cantidadNecesaria = $pedidoProductoItem->getCantidad();
            $stockDisponible = $productoItem->getCurrentStock();

            if ( $stockDisponible < $cantidadNecesaria )
            {
                return false;
            }

        }

        return true;
    }


    public function enviarGuiaEnvio()
    {
        pedidoTable::getInstance()->enviarGuiaEnvio($this);
    }

    public function getMarcas()
    {
        $marcas = MarcaTable::getInstance()->listByIdPedido( $this->getIdPedido() );

        $data = array();
        foreach ($marcas as $marca) {
            $data[ $marca->getIdMarca() ] = $marca->getNombre();
        }

        return $data;
    }

    public function getFactura()
    {
        return FacturaTable::getInstance()->getByIdPedido( $this->getIdPedido() );
    }

    public function getFechaEnvioMostrable()
    {
        if (!$this->getFechaPago())
        {
            return '-';
        }
        else if ( $this->tieneOfertas() )
        {
            return pmDateHelper::getInstance()->sumarDiasHabiles(3, 'd/m/Y', strtotime($this->getFechaUltimaCampana()) );
        }
        else
        {
            return pmDateHelper::getInstance()->sumarDiasHabiles(3, 'd/m/Y', strtotime($this->getFechaPago()) );
        }
    }

    public function getTracking()
    {
        $remitoPedidos = $this->getRemitoPedido();

        if ( !count( $remitoPedidos )  ) {
            return array();
        }

        $remito = $remitoPedidos->getLast()->getRemito();
        return EnvioPack::getInstance( $this->getIdEshop() )->tracking( $remito->getIdEnvio() );
    }

    public function getEnvioPiso()
    {
        $data = $this->getData();
        return str_ireplace('null', '', $data['envio_piso']);
    }

    public function getEnvioDepto()
    {
        $data = $this->getData();
        return str_ireplace('null', '', $data['envio_depto']);
    }

    public function getCantidadProductoItem($idProductoItem)
    {
        return pedidoProductoItemTable::getInstance()->getCantidadDeProductoItemEnPedido($this->getIdPedido(), $idProductoItem);
    }
    
    public function updateTipoPedido()
    {
        if ( $this->tieneSoloOfertas() ) return $this->setTipoProducto(pedido::PRODUCTO_TIPO_OFERTA);
        if ( $this->tieneOutlet() )      return $this->setTipoProducto(pedido::PRODUCTO_TIPO_OUTLET);        
        return $this->setTipoProducto(pedido::PRODUCTO_TIPO_STOCK_PERMANENTE);
    }
    
    public function getDiversidad()
    {
    	return ( $this->tieneOfertas() ) ? 'Mixta' : 'Stock Perm.';
    }
        
    public function getNombreCompleto()
    {
        return $this->getNombre() . ' ' . $this->getApellido();
    }    

    /**
     * Retorna true si todos los productos del pedido son faltantes
     * @return boolean
     */
    public function todosSonFaltantes()
    {
        return pedidoTable::getInstance()->todosSonFaltantes( $this->getIdPedido() );
    }

    public function getSourceDenominacion()
    {
        $source = sourceTable::getInstance()->getDenominacionByCodigo( $this->getSource() );
        
        if ($source){
            return $source;
        }
        
        return null;
    }


    public function getArrayEnvioDetalle()
    {
        return json_decode($this->getEnvioDetalle(), true);
    }


    public function sendToGoogleAnalytics()
    {
        $url  = 'https://www.google-analytics.com/collect?';
        $url .= 'v=1';
        $url .= '&t=transaction';
        $url .= '&tid=UA-11788790-1';
        $url .= '&cid=' . uniqid();
        $url .= '&ti=' . $this->getIdPedido();
        $url .= '&tr=' . $this->getMontoTotal();
        $url .= '&cu=ARS';

        file_get_contents($url);

        $pedidoProductoItems = $this->getPedidoProductoItem();
        foreach( $pedidoProductoItems as $pedidoProductoItem ) {
            $productoItem = $pedidoProductoItem->getProductoItem();
            $productoColor = $pedidoProductoItem->getProductoColor();
            $productoTalle = $pedidoProductoItem->getProductoTalle();
            $producto = $productoItem->getProducto();

            $url  = 'https://www.google-analytics.com/collect?';
            $url .= 'v=1';
            $url .= '&t=item';
            $url .= '&tid=UA-11788790-1';
            $url .= '&cid=' . uniqid();
            $url .= '&ti=' . $this->getIdPedido();
            $url .= '&in=' . $producto->getDenominacion();
            $url .= '&ip=' . $pedidoProductoItem->getPrecioDeluxe();
            $url .= '&iq=' . $pedidoProductoItem->getCantidad();
            $url .= '&ic=' . $producto->getIdProducto();
            $url .= '&iv=' . $productoTalle->getDenominacion() . ' / ' . $productoColor->getDenominacion();
            $url .= '&cu=ARS';

            file_get_contents($url);
        }
    }

    public function updateEnvioDetalle()
    {
        if ( $this->getEnvioTipo() === CarritoEnvio::DOMICILIO )  {
            $json = array(
                'tipo' => $this->getEnvioTipo(),
                'destinatario' => $this->getEnvioDestinatario(),
                'direccion' => trim( $this->getEnvioCalle() . ' ' . $this->getEnvioNumero() . ' ' . $this->getEnvioPiso() . ' ' . $this->getEnvioDepto() ),
                'codigo_postal' => $this->getEnvioCodigoPostal(),
                'provincia' => $this->getProvincia()->getNombre(),
                'localidad' => $this->getEnvioLocalidad(),
                'correo' => $this->getEnvioCorreo(),
                'servicio' => $this->getEnvioServicio()
            );
        } else {

            $sucursal = EnvioPack::getInstance( $this->getIdEshop() )->sucursal( $this->getEnvioIdSucursal() );  

            $json = array(
                'tipo' => $this->getEnvioTipo(),
                'destinatario' => $this->getEnvioDestinatario(),
                'sucursal' => $sucursal['nombre'],
                'direccion' => trim( $sucursal['calle'] . ' ' .  $sucursal['numero'] . ' ' .  $sucursal['piso'] . ' ' .  $sucursal['depto'] ),
                'codigo_postal' => $sucursal['codigo_postal'],
                'provincia' => $this->getProvincia()->getNombre(),
                'localidad' => $sucursal['localidad']['nombre'],
                'telefono' => $sucursal['telefono'],
                'horario' => $sucursal['horario'],
                'correo' => $this->getEnvioCorreo(),
                'servicio' => $this->getEnvioServicio()
            );
        }

        $this->setEnvioDetalle( json_encode($json) );
    }
}
