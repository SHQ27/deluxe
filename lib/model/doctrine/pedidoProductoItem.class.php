<?php

/**
 * pedidoProductoItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class pedidoProductoItem extends BasepedidoProductoItem
{
    /**
     * @return producto
     */
    public function getInfo()
    {
        return $this->getProductoItem()->getProducto();
    }
    
    /*
     *  Si no existe agrega el productoItem al pedido sino solo le suma la cantidad
     */
    public function addProductoItem()
    {
    	$pedidoProductoItem = pedidoProductoItemTable::getInstance()->getByCompoundKey( $this->getIdPedido() , $this->getIdProductoItem() ); 
    	
    	if ($pedidoProductoItem)
    	{
    		$pedidoProductoItem->setCantidad( $pedidoProductoItem->getCantidad() + $this->getCantidad() );    		
    		$pedidoProductoItem->save();
    	}
    	else 
    	{
    		$this->save();
    	}
    	
    }
    

    public function getDiversidad($separator = '<br/>')
    {
        $pedidoProductoItemCampanas = $this->getPedidoProductoItemCampana();
        
        if (count($pedidoProductoItemCampanas))
        {
        	$response = array();
        	foreach ($pedidoProductoItemCampanas as $pedidoProductoItemCampana)
        	{
        		$response[] = $pedidoProductoItemCampana->getCampana()->getDenominacion();
        	}
        	
        	return implode($separator, $response);
        }
        else 
        {
        	return 'Stk. Permanente';
        }
    }
    
    public function esStockPermanente()
    {
        return ($this->getOrigen() == producto::ORIGEN_STOCK_PERMANENTE);
    }
    
    public function esOferta()
    {
        return ($this->getOrigen() == producto::ORIGEN_OFERTA);
    }
    
    public function esOutlet()
    {
        return ($this->getOrigen() == producto::ORIGEN_OUTLET);
    }
    
    public function tieneCampanaActiva()
    {
        $pedidoProductoItemCampanas = $this->getPedidoProductoItemCampana();
        foreach( $pedidoProductoItemCampanas as $pedidoProductoItemCampana )
        {
            if ( $pedidoProductoItemCampana->getCampana()->getActivo() ) return true;
        }
        return false;
    }
    
    public function getCostoSinIva()
    {        
        if ( $this->getProductoItem()->getProducto()->getMarca()->getCondicionFiscal() == marca::COND_FISCAL_RI )
        {
            return round( ($this->getCosto() / 1.21), 2); 
        }
        
        return round( $this->getCosto(), 2);

    }

    public function tieneRefuerzo()
    {
        return stockTable::getInstance()->tieneRefuerzo( $this->getIdPedidoProductoItem() );
    }
    
    public function getPrecioDeluxeSinIva()
    {
        return round( ( $this->getPrecioDeluxe() / 1.21 ), 2 );
    }
        
}
