<?php

/**
 * usuario
 * 
 * This class has bfen auto-generated by the Doctrine ORM Framework
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class usuario extends Baseusuario
{
    const USER_SOURCE = 'US3R_S0URC3';
    
    static public function hashPassword($password)
    {
        return md5($password);
    }
    
	public function __toString()
	{
		return $this->getEmail();
	}
	
	public function delete(Doctrine_Connection $conn = null)
	{
	    $this->setFechaBaja(new Doctrine_Expression('now()'));
	    $this->save();
	}
	
	public function getDireccionEnvioDefault()
	{
	    $direccionEnvio = $this->getDireccionesEnvios()->getFirst();
	    if (!$direccionEnvio) {
	        $direccionEnvio = new direccionEnvio();
	        $direccionEnvio->setUsuario($this);
	    }
	    return $direccionEnvio;
	}
	
	public function getNombreCompleto()
	{
	    return $this->getNombre() . ' ' . $this->getApellido();
	}
	
	public function getSexoNombre()
	{
	    return (strtolower( $this->getSexo() ) == 'h' )? 'Hombre' : 'Mujer';
	}
	
    public function setPassword($password)
    {
    	if ($password)
    	{
    		$this->_set('password', self::hashPassword($password));
    	}
    }
    
    public function getResumenPedidos()
    {
        $resumen = pedidoTable::getInstance()->getResumenByIdUsuario( $this->getIdUsuario() );
        
        return ($resumen)? 'Pedidos: ' . $resumen['count'] . ' | Monto total: $' . formatHelper::getInstance()->decimalNumber($resumen['sum']) : 'No se realizó ningún pedido';
        
    }
    
    public function activar()
    {
        if ($this->getActivo()) {
            return false;
        }
        $this->setFechaConfirmacion(new Doctrine_Expression('NOW()'));
        $this->setActivo(true);
        $this->save();

        // Si no es usuario de eshop se gestionan invitaciones
        if ( !$this->getIdEshop() )
        {
            $invitacion = invitacionTable::getInstance()->findByEmail($this->getEmail());
    
            if ($invitacion) {
                $invitacion->setIdUsuarioInvitado($this->getIdUsuario());
                $invitacion->save();
            }
        }
    }
        
    public function desactivar()
    {
        $this->setFechaBaja(new Doctrine_Expression('NOW()'));
        $this->setActivo(false);
        return $this->save();
    }
    
    /**
     * @return Doctrine_Query_Abstract
     */
    protected function invitacionesQuery()
    {
        return invitacionTable::getInstance()->createQueryByUsuario($this);        
    }
    
    public function getInvitacionesPendientes()
    {
        
        return $this->invitacionesQuery()
            ->andWhere('id_usuario_invitado IS NULL')->execute();
    }
    
    public function getInvitadosSocios()
    {
        return $this->invitacionesQuery()
            ->andWhere('id_usuario_invitado IS NOT NULL')
            ->execute();
    }
    
    public function getBonificaciones()
    {
        return bonificacionTable::getInstance()->listExternasByIdUsuario( $this->getIdUsuario() );
    }
    
    public function getInvitadosCompraron()
    {
        return $this->invitacionesQuery()
            ->andWhere('id_usuario_invitado IS NOT NULL')
            ->addWhere('id_pedido_realizado IS NOT NULL')
            ->execute();
    }
    
    public function getHashActivacion()
    {
        return md5($this->getEmail() . $this->getFechaAlta());
    }
    
    public function getSourceDenominacion()
    {
        $source = sourceTable::getInstance()->getDenominacionByCodigo( $this->getSource() );
        
        if ($source){
            return $source;
        }
        
        return null;
    }
    
    public function bonificarAlta()
    {
        $tieneAltaBonificada = bonificacionTable::getInstance()->tieneAltaBonificada( $this->getIdUsuario() );
        $valor = configuracionTable::getValor(configuracion::MONTO_ALTA_USUARIO);
    
        if ( !$tieneAltaBonificada && $valor > 0 )
        {
            $vencimiento = configuracionTable::getValor(configuracion::VENCIMIENTO_ALTA_USUARIO);
    
            $altaUsuarioBonificacion = new bonificacion();
            $altaUsuarioBonificacion->setIdUsuario($this->getIdUsuario())
            ->setIdTipoDescuento(tipoDescuento::MONTOFIJO)
            ->setIdTipoBonificacion(tipoBonificacion::ALTA_USUARIO)
            ->setValor($valor)
            ->setVencimiento(new Doctrine_Expression("ADDDATE(NOW(), {$vencimiento})"))
            ->save();
        }
    }

    
    public function comproAlgunaVez()
    {
        return pedidoTable::getInstance()->comproAlgunaVez( $this->getIdUsuario() );
    }
    
}
