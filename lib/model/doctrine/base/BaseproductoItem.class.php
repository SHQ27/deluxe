<?php

/**
 * BaseproductoItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_producto_item
 * @property integer $id_producto
 * @property integer $id_producto_talle
 * @property integer $id_producto_color
 * @property string $codigo
 * @property integer $stock
 * @property integer $stock_campana
 * @property integer $stock_permanente
 * @property integer $stock_outlet
 * @property integer $stock_refuerzo
 * @property clob $data_mercado_libre
 * @property producto $producto
 * @property productoTalle $productoTalle
 * @property productoColor $productoColor
 * @property Doctrine_Collection $carritoProductoItem
 * @property Doctrine_Collection $pedidoProductoItem
 * @property Doctrine_Collection $stock
 * @property Doctrine_Collection $waitingList
 * @property Doctrine_Collection $faltante
 * @property Doctrine_Collection $devolucionProductoItem
 * @property Doctrine_Collection $fallado
 * @property Doctrine_Collection $devueltoMarca
 * 
 * @method integer             getIdProductoItem()         Returns the current record's "id_producto_item" value
 * @method integer             getIdProducto()             Returns the current record's "id_producto" value
 * @method integer             getIdProductoTalle()        Returns the current record's "id_producto_talle" value
 * @method integer             getIdProductoColor()        Returns the current record's "id_producto_color" value
 * @method string              getCodigo()                 Returns the current record's "codigo" value
 * @method Doctrine_Collection getStock()                  Returns the current record's "stock" collection
 * @method integer             getStockCampana()           Returns the current record's "stock_campana" value
 * @method integer             getStockPermanente()        Returns the current record's "stock_permanente" value
 * @method integer             getStockOutlet()            Returns the current record's "stock_outlet" value
 * @method integer             getStockRefuerzo()          Returns the current record's "stock_refuerzo" value
 * @method clob                getDataMercadoLibre()       Returns the current record's "data_mercado_libre" value
 * @method producto            getProducto()               Returns the current record's "producto" value
 * @method productoTalle       getProductoTalle()          Returns the current record's "productoTalle" value
 * @method productoColor       getProductoColor()          Returns the current record's "productoColor" value
 * @method Doctrine_Collection getCarritoProductoItem()    Returns the current record's "carritoProductoItem" collection
 * @method Doctrine_Collection getPedidoProductoItem()     Returns the current record's "pedidoProductoItem" collection
 * @method Doctrine_Collection getWaitingList()            Returns the current record's "waitingList" collection
 * @method Doctrine_Collection getFaltante()               Returns the current record's "faltante" collection
 * @method Doctrine_Collection getDevolucionProductoItem() Returns the current record's "devolucionProductoItem" collection
 * @method Doctrine_Collection getFallado()                Returns the current record's "fallado" collection
 * @method Doctrine_Collection getDevueltoMarca()          Returns the current record's "devueltoMarca" collection
 * @method productoItem        setIdProductoItem()         Sets the current record's "id_producto_item" value
 * @method productoItem        setIdProducto()             Sets the current record's "id_producto" value
 * @method productoItem        setIdProductoTalle()        Sets the current record's "id_producto_talle" value
 * @method productoItem        setIdProductoColor()        Sets the current record's "id_producto_color" value
 * @method productoItem        setCodigo()                 Sets the current record's "codigo" value
 * @method productoItem        setStock()                  Sets the current record's "stock" collection
 * @method productoItem        setStockCampana()           Sets the current record's "stock_campana" value
 * @method productoItem        setStockPermanente()        Sets the current record's "stock_permanente" value
 * @method productoItem        setStockOutlet()            Sets the current record's "stock_outlet" value
 * @method productoItem        setStockRefuerzo()          Sets the current record's "stock_refuerzo" value
 * @method productoItem        setDataMercadoLibre()       Sets the current record's "data_mercado_libre" value
 * @method productoItem        setProducto()               Sets the current record's "producto" value
 * @method productoItem        setProductoTalle()          Sets the current record's "productoTalle" value
 * @method productoItem        setProductoColor()          Sets the current record's "productoColor" value
 * @method productoItem        setCarritoProductoItem()    Sets the current record's "carritoProductoItem" collection
 * @method productoItem        setPedidoProductoItem()     Sets the current record's "pedidoProductoItem" collection
 * @method productoItem        setWaitingList()            Sets the current record's "waitingList" collection
 * @method productoItem        setFaltante()               Sets the current record's "faltante" collection
 * @method productoItem        setDevolucionProductoItem() Sets the current record's "devolucionProductoItem" collection
 * @method productoItem        setFallado()                Sets the current record's "fallado" collection
 * @method productoItem        setDevueltoMarca()          Sets the current record's "devueltoMarca" collection
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseproductoItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('producto_item');
        $this->hasColumn('id_producto_item', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_producto', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_producto_talle', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_producto_color', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('codigo', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('stock', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('stock_campana', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('stock_permanente', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('stock_outlet', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('stock_refuerzo', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('data_mercado_libre', 'clob', 65535, array(
             'type' => 'clob',
             'length' => 65535,
             ));


        $this->index('fk_producto_item_producto1', array(
             'fields' => 
             array(
              0 => 'id_producto',
             ),
             ));
        $this->index('fk_producto_item_producto_tamano1', array(
             'fields' => 
             array(
              0 => 'id_producto_talle',
             ),
             ));
        $this->index('fk_producto_item_producto_color1', array(
             'fields' => 
             array(
              0 => 'id_producto_color',
             ),
             ));
        $this->index('FK_producto_item_talle_color', array(
             'fields' => 
             array(
              0 => 'id_producto_talle',
              1 => 'id_producto_color',
              2 => 'id_producto',
             ),
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('producto', array(
             'local' => 'id_producto',
             'foreign' => 'id_producto',
             'owningSide' => true));

        $this->hasOne('productoTalle', array(
             'local' => 'id_producto_talle',
             'foreign' => 'id_producto_talle',
             'owningSide' => true));

        $this->hasOne('productoColor', array(
             'local' => 'id_producto_color',
             'foreign' => 'id_producto_color',
             'owningSide' => true));

        $this->hasMany('carritoProductoItem', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('pedidoProductoItem', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('stock', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('waitingList', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('faltante', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('devolucionProductoItem', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('fallado', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));

        $this->hasMany('devueltoMarca', array(
             'local' => 'id_producto_item',
             'foreign' => 'id_producto_item'));
    }
}