<?php

/**
 * falladoTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class falladoTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object falladoTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('fallado');
    }
    
    
    /**
     * Retorna un array con toda la informacion del listado de fallados
     *
     * @param integer $idMarca
     * @param string $fechaDesde
     * @param string $fechaHasta
     *
     * @return array
     */
    public function queryFallados($idMarca, $idEshop, $fechaDesde = null, $fechaHasta = null, $sort  = null, $sortType = null )
    {
        $q =  $this->createQuery('f')
                   ->select( 'f.id_fallado, pi.id_producto_item, ppi.id_producto_item')
                   ->addSelect( 'm.nombre as marca' )
                   ->addSelect( 'COALESCE(e.denominacion, \'Deluxe Buys\') as eshop' )
                   ->addSelect( '(SELECT MIN(pim.id_producto_imagen) FROM productoImagen pim WHERE pim.id_producto = p.id_producto) as id_producto_imagen' )
                   ->addSelect( 'pi.codigo as codigo' )
                   ->addSelect( 'p.id_producto as id_producto' )
                   ->addSelect( 'p.denominacion as denominacion' )
                   ->addSelect( 'pt.denominacion as talle' )
                   ->addSelect( 'pc.denominacion as color' )
                   ->addSelect( 'ppi.costo as costo' )
                   ->addSelect( 'count(pi.id_producto_item) as cantidad' )
                   ->addSelect( 'GROUP_CONCAT(f.id_fallado) as ids_fallados' )
                   ->leftJoin( 'f.eshop e' )
                   ->innerJoin( 'f.pedidoProductoItem ppi' )
                   ->innerJoin( 'f.productoItem pi' )
                   ->innerJoin( 'pi.producto p' )
                   ->innerJoin( 'pi.productoColor pc' )
                   ->innerJoin( 'pi.productoTalle pt' )
                   ->innerJoin( 'p.marca m' )
                   ->addWhere( 'ppi.costo > 0' )
                   ->addWhere( 'f.recuperado = false' )
                   ->orderBy( "m.nombre asc, p.denominacion asc" )
                   ->groupBy('m.nombre, p.id_producto, pi.codigo, p.denominacion, pt.denominacion, pc.denominacion, ppi.costo');
        
        // Filtro por Marca
        if ( $idMarca )
        {
            $q->addWhere( 'm.id_marca = ?', $idMarca );
        }
        
        // Filtro por fecha
        if ( $fechaDesde ) $q->addWhere( 'f.fecha >= ?', $fechaDesde );
        if ( $fechaHasta ) $q->addWhere( 'f.fecha <= ?', $fechaHasta );

        // Filtro por eshop        
        if ( $idEshop )
        {
            if ( $idEshop == eshop::ESHOP_DELUXE )
            {
                $q->addWhere( 'f.id_eshop IS NULL');
            }
            else
            {
                $q->addWhere( 'f.id_eshop = ?', $idEshop);
            }
        }

        return $q;
    }
    
    /**
     * Retorna un array con toda la informacion del exportar excel en el listado de fallados
     *
     * @param integer $idMarca
     * @param string $fechaDesde
     * @param string $fechaHasta
     *
     * @return array
     */
    public function listForExcel($idMarca, $idEshop, $fechaDesde, $fechaHasta, $sort  = null, $sortType = null )
    {
        $q =  $this->createQuery('f')
                   ->select( 'f.id_fallado, pi.id_producto_item, ppi.id_producto_item')
                   ->addSelect( 'm.nombre as marca' )
                   ->addSelect( 'COALESCE(e.denominacion, \'Deluxe Buys\') as eshop' )
                   ->addSelect( 'pi.codigo as codigo' )
                   ->addSelect( 'p.id_producto as id_producto' )
                   ->addSelect( 'p.denominacion as denominacion' )
                   ->addSelect( 'pt.denominacion as talle' )
                   ->addSelect( 'pc.denominacion as color' )
                   ->addSelect( 'ppi.costo as costo' )
                   ->addSelect( 'f.descripcion as descripcion' )
                   ->leftJoin( 'f.eshop e' )
                   ->innerJoin( 'f.pedidoProductoItem ppi' )
                   ->innerJoin( 'f.productoItem pi' )
                   ->innerJoin( 'pi.producto p' )
                   ->innerJoin( 'pi.productoColor pc' )
                   ->innerJoin( 'pi.productoTalle pt' )
                   ->innerJoin( 'p.marca m' )
                   ->addWhere( 'ppi.costo > 0' )
                   ->addWhere( 'f.recuperado = false' )
                   ->orderBy( "m.nombre asc, p.denominacion asc" );
    
        // Filtro por Marca
        if ( $idMarca )
        {
            $q->addWhere( 'm.id_marca = ?', $idMarca );
        }
    
        // Filtro por fecha
        if ( $fechaDesde ) $q->addWhere( 'f.fecha >= ?', $fechaDesde );
        if ( $fechaHasta ) $q->addWhere( 'f.fecha <= ?', $fechaHasta );
        
        // Filtro por eshop
        if ( $idEshop )
        {
            if ( $idEshop == eshop::ESHOP_DELUXE )
            {
                $q->addWhere( 'f.id_eshop IS NULL');
            }
            else
            {
                $q->addWhere( 'f.id_eshop = ?', $idEshop);
            }
        }
    
        return $q->fetchArray();
    }
    
    public function listFallados($idMarca, $idEshop)
    {
        return $this->queryFallados($idMarca, $idEshop)->fetchArray();
    }
    
    public function marcarRecuperados($recuperados)
    {
        $this->createQuery('f')
             ->update('fallado f')
             ->set('f.recuperado', true)
             ->whereIn('f.id_fallado', $recuperados)
             ->execute();
    }
    
    /**
     * Retorna el listado de los productos seleccionados a recuperar
     *
     * @param array $ids
     *
     * @return array
     */
    public function listXRecuperar($ids)
    {
        return $this->createQuery('f')
                    ->select( 'f.id_fallado, pi.id_producto_item, ppi.id_producto_item')
                    ->addSelect( 'f.id_fallado as id_fallado' )
                    ->addSelect( 'f.fecha as fecha' )
                    ->addSelect( 'm.nombre as marca' )
                    ->addSelect( 'pi.codigo as codigo' )
                    ->addSelect( 'p.id_producto as id_producto' )
                    ->addSelect( '(SELECT MIN(pim.id_producto_imagen) FROM productoImagen pim WHERE pim.id_producto = p.id_producto) as id_producto_imagen' )
                    ->addSelect( 'p.denominacion as denominacion' )
                    ->addSelect( 'pt.denominacion as talle' )
                    ->addSelect( 'pc.denominacion as color' )
                    ->addSelect( 'ppi.costo as costo' )
                    ->addSelect( 'f.descripcion as descripcion_falla' )
                    ->innerJoin( 'f.pedidoProductoItem ppi' )
                    ->innerJoin( 'ppi.productoItem pi' )
                    ->innerJoin( 'pi.producto p' )
                    ->innerJoin( 'pi.productoColor pc' )
                    ->innerJoin( 'pi.productoTalle pt' )
                    ->innerJoin( 'p.marca m' )
                    ->whereIn('f.id_fallado', $ids)
                    ->fetchArray();
    }
    
    public function getDetalleFalladosReporteMensual($desde, $hasta, $idEshop = null)
    {
    
        $q = $this->createQuery('f')
                    ->addSelect('f.id_fallado, ppi.id_pedido_producto_item, pi.id_producto_item')
                    ->addSelect('m.nombre as marca')
                    ->addSelect('pi.codigo as codigo')
                    ->addSelect('p.denominacion as producto')
                    ->addSelect('SUM(ppi.cantidad) as unidades')
                    ->addSelect('SUM(ppi.precio_deluxe/IF(m.condicion_fiscal = \'RIN\', 1.21, 1)) as precio_unitario_sin_iva')
                    ->addSelect('SUM(ppi.costo) as costo_con_iva')
                    ->addSelect('SUM(ppi.costo/IF(m.condicion_fiscal = \'RIN\', 1.21, 1)) as costo_sin_iva')
                    ->innerJoin('f.pedidoProductoItem ppi')
                    ->innerJoin('ppi.productoItem pi')
                    ->innerJoin('pi.producto p')
                    ->innerJoin('p.marca m')
                    ->addWhere('(? <= DATE(f.fecha) AND DATE(f.fecha) <= ?)', array($desde, $hasta) )
                    ->groupBy('m.nombre, p.denominacion');
        
        if ( $idEshop ) {
            $q->addWhere('f.id_eshop = ?', $idEshop );
        } else {
            $q->addWhere('f.id_eshop IS NULL' );
        }
        
        return $q->execute( array(), 'HYDRATE_ARRAY_SHALLOW');
    }
    
}