<?php

/**
 * devolucion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    deluxebuys
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class devolucion extends Basedevolucion
{
	CONST envio_deluxe = 'DELUXE';
	CONST envio_oca = 'OCA';
	CONST credito_deluxe = 'DELUXE';
	CONST credito_mp = 'MP';
	
	public function calcularMontoTotal($desglosar = false)
	{
		$valorProductos = 0;
		
		$idsPedido = array();
		
		$devolucionProductoItems = $this->getDevolucionProductoItem();
		foreach($devolucionProductoItems as $devolucionProductoItem)
		{			
		    $idPedido = $devolucionProductoItem->getPedidoProductoItem()->getIdPedido();
		    
		    if ( !isset($idsPedido[$idPedido]) )
		    {
		        $idsPedido[$idPedido] = 0;
		    }

		    if ( $this->getFechaCierre() )
		    {
		        $idsPedido[$idPedido] += $devolucionProductoItem->getCantidadStock();
		    }
		    else
		    {
		        $idsPedido[$idPedido] += $devolucionProductoItem->getCantidad();
		    }
		    
			$valorProductos += $devolucionProductoItem->calcularMontoTotal();
		}
				
        /*
         * Se le descuenta el costo de envio si pide devolverlo via oca y
         * no fue una devolucion por error nuestro
         */
		$costoEnvioDevolucion = 0;
		if ($this->getTipoEnvio() == devolucion::envio_oca && !in_array( $this->getIdDevolucionMotivo() , array('INCOR','FALLA')))
		{
		    $esEshop = (bool) $this->getIdEshop();

		    $correo = EnvioPack::getInstance( $idEshop )->getCorreoParaDevolucion( $this->getIdEshop(), $this->getCodigoPostal() );

		    $costoEnvioDevolucion =  EnvioPack::getInstance( $this->getIdEshop() )->costoCorreo(
		    	$this->getCodigoPostal(),
			    $correo,
			    $this->getPeso(),
			    carritoEnvio::DOMICILIO,
			    'R'
		    );
		}
		
		
		/*
		 * Se le devuelve el costo de envio si la devolucion fue por error nuestro,
		 * independientemente de como lo devuelve personalmente o via oca.
		 * Siempre que se devuelva el pedido en su totalidad
		 */
		$costoEnvioOriginal = 0;
		if (in_array( $this->getIdDevolucionMotivo() , array('INCOR','FALLA')))
		{
		    
		    foreach( $idsPedido as $idPedido => $devueltos )
		    {
		        $enPedido = pedidoProductoItemTable::getInstance()->countByIdPedido($idPedido);
		        
		        if ( $devueltos == $enPedido )
		        {
		            $pedido = pedidoTable::getInstance()->getByIdPedido($idPedido);
		            $costoEnvioOriginal += $pedido->getMontoEnvio();
		        }
		    }
		    
		}


		$esEshop = (bool) $this->getIdEshop();

		if ( $esEshop ) {
			if ( $this->getEshop()->getDevolucionFreeshipping() ) {
				$total = $valorProductos;
			} else {
				$total = $valorProductos - $costoEnvioDevolucion + $costoEnvioOriginal;
			}
			
		} else {
			$total = $valorProductos - $costoEnvioDevolucion + $costoEnvioOriginal;
		}
				
		$total = ( $total > 0 ) ? $total : 0;
		
		if ( $desglosar )
		{
		    return array(
		        'valorProductos' => $valorProductos,
		        'costoEnvioDevolucion' => $costoEnvioDevolucion,
		        'costoEnvioOriginal' => $costoEnvioOriginal,
		        'total' => $total,
		    );
		}
		else
		{
            return $total;
		}
				
		
	}
	
	public function getPeso()
	{
	    return devolucionProductoItemTable::getInstance()->getPesoByIdDevolucion( $this->getIdDevolucion() );
	}
	
	public function preDelete($event)
	{
	    $idDevolucion = $this->getIdDevolucion();
	    devolucionProductoItemTable::getInstance()->deleteByIdDevolucion($idDevolucion);
	}
	
	public function devolverStock()
	{
	    $devolucionProductoItems = $this->getDevolucionProductoItem();
    
        foreach ( $devolucionProductoItems as $devolucionProductoItem )
        {
            // Se le resta al stock a la cantidad de stock a devolver, la cantidad fallada o que va a devolucion a marcas
            $stockADevolver = $devolucionProductoItem->getCantidadStock() - ( $devolucionProductoItem->getCantidadFallados() + $devolucionProductoItem->getCantidadDevueltosMarcas() ); 
                            
            if ( $stockADevolver )
            {    	                
                $productoItem = $devolucionProductoItem->getProductoItem();

                if ( $this->getIdEshop() ) {
                    $productoItem->sumaStock( $stockADevolver, producto::ORIGEN_STOCK_PERMANENTE, stockTipo::SISTEMA_DEVOLUCION, $devolucionProductoItem->getIdPedidoProductoItem(), 'Alta por Devolucion #' . $this->getIdDevolucion() );
                } else {
                    $productoItem->sumaStock( $stockADevolver, producto::ORIGEN_OUTLET, stockTipo::SISTEMA_DEVOLUCION, $devolucionProductoItem->getIdPedidoProductoItem(), 'Alta por Devolucion #' . $this->getIdDevolucion() );
                }
            }
        }
	}
	
	public function getTracking()
	{
	    return array();
	}

	public function getEstadoHTML() {

		if ($this->getFechaEnvioOca() || $this->getFechaRecibido() || $this->getFechaCierre() ){

			if ( $this->getFechaEnvioOca() ) {
				return '<span class="naranja">Enviado a OCA</span><br/>';
			}

			if ( $this->getFechaRecibido() ) {
				return '<span class="naranja">Recibido</span><br/>';
			}

			if ( $this->getFechaCierre() ) {
				return '<span class="verde">Tr√°mite finalizado</span><br/>';
			}

	 	} else {
	 		return '<span class="rojo">Sin estado</span>';
	 	}

	}
	
}
